# coding: utf-8

"""
    VAAS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class InlineObject8(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'az': 'str',
        'dbname': 'str',
        'enable_ssh': 'bool',
        'external_access_cidr_block': 'list[str]',
        'force': 'bool',
        'instance_type': 'str',
        'passwd': 'str',
        'primary_cluster_nodes': 'int',
        'region': 'str',
        'vertica_version': 'str'
    }

    attribute_map = {
        'az': 'az',
        'dbname': 'dbname',
        'enable_ssh': 'enable_ssh',
        'external_access_cidr_block': 'external_access_cidr_block',
        'force': 'force',
        'instance_type': 'instance_type',
        'passwd': 'passwd',
        'primary_cluster_nodes': 'primary_cluster_nodes',
        'region': 'region',
        'vertica_version': 'vertica_version'
    }

    def __init__(self, az=None, dbname=None, enable_ssh=None, external_access_cidr_block=None, force=True, instance_type=None, passwd=None, primary_cluster_nodes=None, region=None, vertica_version=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject8 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._az = None
        self._dbname = None
        self._enable_ssh = None
        self._external_access_cidr_block = None
        self._force = None
        self._instance_type = None
        self._passwd = None
        self._primary_cluster_nodes = None
        self._region = None
        self._vertica_version = None
        self.discriminator = None

        if az is not None:
            self.az = az
        self.dbname = dbname
        if enable_ssh is not None:
            self.enable_ssh = enable_ssh
        if external_access_cidr_block is not None:
            self.external_access_cidr_block = external_access_cidr_block
        if force is not None:
            self.force = force
        self.instance_type = instance_type
        self.passwd = passwd
        self.primary_cluster_nodes = primary_cluster_nodes
        if region is not None:
            self.region = region
        if vertica_version is not None:
            self.vertica_version = vertica_version

    @property
    def az(self):
        """Gets the az of this InlineObject8.  # noqa: E501


        :return: The az of this InlineObject8.  # noqa: E501
        :rtype: str
        """
        return self._az

    @az.setter
    def az(self, az):
        """Sets the az of this InlineObject8.


        :param az: The az of this InlineObject8.  # noqa: E501
        :type az: str
        """

        self._az = az

    @property
    def dbname(self):
        """Gets the dbname of this InlineObject8.  # noqa: E501


        :return: The dbname of this InlineObject8.  # noqa: E501
        :rtype: str
        """
        return self._dbname

    @dbname.setter
    def dbname(self, dbname):
        """Sets the dbname of this InlineObject8.


        :param dbname: The dbname of this InlineObject8.  # noqa: E501
        :type dbname: str
        """
        if self.local_vars_configuration.client_side_validation and dbname is None:  # noqa: E501
            raise ValueError("Invalid value for `dbname`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                dbname is not None and len(dbname) > 18):
            raise ValueError("Invalid value for `dbname`, length must be less than or equal to `18`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                dbname is not None and len(dbname) < 1):
            raise ValueError("Invalid value for `dbname`, length must be greater than or equal to `1`")  # noqa: E501

        self._dbname = dbname

    @property
    def enable_ssh(self):
        """Gets the enable_ssh of this InlineObject8.  # noqa: E501


        :return: The enable_ssh of this InlineObject8.  # noqa: E501
        :rtype: bool
        """
        return self._enable_ssh

    @enable_ssh.setter
    def enable_ssh(self, enable_ssh):
        """Sets the enable_ssh of this InlineObject8.


        :param enable_ssh: The enable_ssh of this InlineObject8.  # noqa: E501
        :type enable_ssh: bool
        """

        self._enable_ssh = enable_ssh

    @property
    def external_access_cidr_block(self):
        """Gets the external_access_cidr_block of this InlineObject8.  # noqa: E501


        :return: The external_access_cidr_block of this InlineObject8.  # noqa: E501
        :rtype: list[str]
        """
        return self._external_access_cidr_block

    @external_access_cidr_block.setter
    def external_access_cidr_block(self, external_access_cidr_block):
        """Sets the external_access_cidr_block of this InlineObject8.


        :param external_access_cidr_block: The external_access_cidr_block of this InlineObject8.  # noqa: E501
        :type external_access_cidr_block: list[str]
        """
        if (self.local_vars_configuration.client_side_validation and
                external_access_cidr_block is not None and len(external_access_cidr_block) < 1):
            raise ValueError("Invalid value for `external_access_cidr_block`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._external_access_cidr_block = external_access_cidr_block

    @property
    def force(self):
        """Gets the force of this InlineObject8.  # noqa: E501


        :return: The force of this InlineObject8.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this InlineObject8.


        :param force: The force of this InlineObject8.  # noqa: E501
        :type force: bool
        """

        self._force = force

    @property
    def instance_type(self):
        """Gets the instance_type of this InlineObject8.  # noqa: E501


        :return: The instance_type of this InlineObject8.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this InlineObject8.


        :param instance_type: The instance_type of this InlineObject8.  # noqa: E501
        :type instance_type: str
        """
        if self.local_vars_configuration.client_side_validation and instance_type is None:  # noqa: E501
            raise ValueError("Invalid value for `instance_type`, must not be `None`")  # noqa: E501

        self._instance_type = instance_type

    @property
    def passwd(self):
        """Gets the passwd of this InlineObject8.  # noqa: E501


        :return: The passwd of this InlineObject8.  # noqa: E501
        :rtype: str
        """
        return self._passwd

    @passwd.setter
    def passwd(self, passwd):
        """Sets the passwd of this InlineObject8.


        :param passwd: The passwd of this InlineObject8.  # noqa: E501
        :type passwd: str
        """
        if self.local_vars_configuration.client_side_validation and passwd is None:  # noqa: E501
            raise ValueError("Invalid value for `passwd`, must not be `None`")  # noqa: E501

        self._passwd = passwd

    @property
    def primary_cluster_nodes(self):
        """Gets the primary_cluster_nodes of this InlineObject8.  # noqa: E501


        :return: The primary_cluster_nodes of this InlineObject8.  # noqa: E501
        :rtype: int
        """
        return self._primary_cluster_nodes

    @primary_cluster_nodes.setter
    def primary_cluster_nodes(self, primary_cluster_nodes):
        """Sets the primary_cluster_nodes of this InlineObject8.


        :param primary_cluster_nodes: The primary_cluster_nodes of this InlineObject8.  # noqa: E501
        :type primary_cluster_nodes: int
        """
        if self.local_vars_configuration.client_side_validation and primary_cluster_nodes is None:  # noqa: E501
            raise ValueError("Invalid value for `primary_cluster_nodes`, must not be `None`")  # noqa: E501

        self._primary_cluster_nodes = primary_cluster_nodes

    @property
    def region(self):
        """Gets the region of this InlineObject8.  # noqa: E501


        :return: The region of this InlineObject8.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this InlineObject8.


        :param region: The region of this InlineObject8.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def vertica_version(self):
        """Gets the vertica_version of this InlineObject8.  # noqa: E501


        :return: The vertica_version of this InlineObject8.  # noqa: E501
        :rtype: str
        """
        return self._vertica_version

    @vertica_version.setter
    def vertica_version(self, vertica_version):
        """Sets the vertica_version of this InlineObject8.


        :param vertica_version: The vertica_version of this InlineObject8.  # noqa: E501
        :type vertica_version: str
        """

        self._vertica_version = vertica_version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject8):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject8):
            return True

        return self.to_dict() != other.to_dict()
