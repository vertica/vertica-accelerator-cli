# coding: utf-8

"""
    VAAS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class InlineObject22(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dnsname': 'str',
        'module_names': 'list[str]'
    }

    attribute_map = {
        'dnsname': 'dnsname',
        'module_names': 'module_names'
    }

    def __init__(self, dnsname=None, module_names=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject22 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._dnsname = None
        self._module_names = None
        self.discriminator = None

        if dnsname is not None:
            self.dnsname = dnsname
        self.module_names = module_names

    @property
    def dnsname(self):
        """Gets the dnsname of this InlineObject22.  # noqa: E501


        :return: The dnsname of this InlineObject22.  # noqa: E501
        :rtype: str
        """
        return self._dnsname

    @dnsname.setter
    def dnsname(self, dnsname):
        """Sets the dnsname of this InlineObject22.


        :param dnsname: The dnsname of this InlineObject22.  # noqa: E501
        :type dnsname: str
        """
        if (self.local_vars_configuration.client_side_validation and
                dnsname is not None and len(dnsname) > 18):
            raise ValueError("Invalid value for `dnsname`, length must be less than or equal to `18`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                dnsname is not None and len(dnsname) < 3):
            raise ValueError("Invalid value for `dnsname`, length must be greater than or equal to `3`")  # noqa: E501

        self._dnsname = dnsname

    @property
    def module_names(self):
        """Gets the module_names of this InlineObject22.  # noqa: E501


        :return: The module_names of this InlineObject22.  # noqa: E501
        :rtype: list[str]
        """
        return self._module_names

    @module_names.setter
    def module_names(self, module_names):
        """Sets the module_names of this InlineObject22.


        :param module_names: The module_names of this InlineObject22.  # noqa: E501
        :type module_names: list[str]
        """
        if self.local_vars_configuration.client_side_validation and module_names is None:  # noqa: E501
            raise ValueError("Invalid value for `module_names`, must not be `None`")  # noqa: E501
        allowed_values = ["vertica_cluster", "vertica_subcluster_1", "vertica_subcluster_2", "vertica_subcluster_3"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(module_names).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `module_names` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(module_names) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._module_names = module_names

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject22):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject22):
            return True

        return self.to_dict() != other.to_dict()
