# coding: utf-8

"""
    VAAS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class InlineObject19(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'force': 'bool',
        'instance_count': 'int',
        'instance_type': 'str',
        'module_name': 'str',
        'subcluster_name': 'str'
    }

    attribute_map = {
        'force': 'force',
        'instance_count': 'instance_count',
        'instance_type': 'instance_type',
        'module_name': 'module_name',
        'subcluster_name': 'subcluster_name'
    }

    def __init__(self, force=True, instance_count=None, instance_type=None, module_name=None, subcluster_name=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject19 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._force = None
        self._instance_count = None
        self._instance_type = None
        self._module_name = None
        self._subcluster_name = None
        self.discriminator = None

        if force is not None:
            self.force = force
        self.instance_count = instance_count
        self.instance_type = instance_type
        self.module_name = module_name
        self.subcluster_name = subcluster_name

    @property
    def force(self):
        """Gets the force of this InlineObject19.  # noqa: E501


        :return: The force of this InlineObject19.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this InlineObject19.


        :param force: The force of this InlineObject19.  # noqa: E501
        :type force: bool
        """

        self._force = force

    @property
    def instance_count(self):
        """Gets the instance_count of this InlineObject19.  # noqa: E501


        :return: The instance_count of this InlineObject19.  # noqa: E501
        :rtype: int
        """
        return self._instance_count

    @instance_count.setter
    def instance_count(self, instance_count):
        """Sets the instance_count of this InlineObject19.


        :param instance_count: The instance_count of this InlineObject19.  # noqa: E501
        :type instance_count: int
        """
        if self.local_vars_configuration.client_side_validation and instance_count is None:  # noqa: E501
            raise ValueError("Invalid value for `instance_count`, must not be `None`")  # noqa: E501

        self._instance_count = instance_count

    @property
    def instance_type(self):
        """Gets the instance_type of this InlineObject19.  # noqa: E501


        :return: The instance_type of this InlineObject19.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this InlineObject19.


        :param instance_type: The instance_type of this InlineObject19.  # noqa: E501
        :type instance_type: str
        """
        if self.local_vars_configuration.client_side_validation and instance_type is None:  # noqa: E501
            raise ValueError("Invalid value for `instance_type`, must not be `None`")  # noqa: E501

        self._instance_type = instance_type

    @property
    def module_name(self):
        """Gets the module_name of this InlineObject19.  # noqa: E501


        :return: The module_name of this InlineObject19.  # noqa: E501
        :rtype: str
        """
        return self._module_name

    @module_name.setter
    def module_name(self, module_name):
        """Sets the module_name of this InlineObject19.


        :param module_name: The module_name of this InlineObject19.  # noqa: E501
        :type module_name: str
        """
        if self.local_vars_configuration.client_side_validation and module_name is None:  # noqa: E501
            raise ValueError("Invalid value for `module_name`, must not be `None`")  # noqa: E501

        self._module_name = module_name

    @property
    def subcluster_name(self):
        """Gets the subcluster_name of this InlineObject19.  # noqa: E501


        :return: The subcluster_name of this InlineObject19.  # noqa: E501
        :rtype: str
        """
        return self._subcluster_name

    @subcluster_name.setter
    def subcluster_name(self, subcluster_name):
        """Sets the subcluster_name of this InlineObject19.


        :param subcluster_name: The subcluster_name of this InlineObject19.  # noqa: E501
        :type subcluster_name: str
        """
        if self.local_vars_configuration.client_side_validation and subcluster_name is None:  # noqa: E501
            raise ValueError("Invalid value for `subcluster_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                subcluster_name is not None and len(subcluster_name) > 22):
            raise ValueError("Invalid value for `subcluster_name`, length must be less than or equal to `22`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                subcluster_name is not None and len(subcluster_name) < 1):
            raise ValueError("Invalid value for `subcluster_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._subcluster_name = subcluster_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject19):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject19):
            return True

        return self.to_dict() != other.to_dict()
